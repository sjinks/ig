'use strict';

var gulp         = require('gulp');
var del          = require('del');
var rename       = require('gulp-rename');
var sourcemaps   = require('gulp-sourcemaps');
var postcss      = require('gulp-postcss');
var sass         = require('gulp-sass');
var uglify       = require('gulp-uglify');
var exec         = require('gulp-exec');
var imagemin     = require('gulp-imagemin');
var htmlmin      = require('gulp-htmlmin');
var prune        = require('gulp-prune');
var newer        = require('gulp-newer');
var include      = require('gulp-include');

gulp.task('clean:images', function() {
	return del(['public/img']);
});

gulp.task('clean:css', function() {
	return del(['public/css']);
});

gulp.task('clean:js', function() {
	return del(['public/js']);
});

gulp.task('clean:files', function() {
	return del([
		'./public/*',
		'!./public/css',
		'!./public/img',
		'!./public/js',
		'!./public/uploads',
	]);
});

gulp.task('clean', function() {
	return del(['public/**', '!public', '!public/uploads']);
});

gulp.task('images', function() {
	var src  = ['public-dev/img/**/*'];
	var dest = 'public/img';
	return gulp.src(src)
		.pipe(prune(dest))
		.pipe(newer(dest))
		.pipe(imagemin([
			imagemin.gifsicle({interlaced: true}),
			imagemin.jpegtran({progressive: true}),
			imagemin.optipng({optimizationLevel: 9})
		]))
		.pipe(gulp.dest(dest))
	;
});

gulp.task('css', function() {
	var src  = ['public-dev/css/**/*.scss'];
	var dest = 'public/css';
	return gulp.src(src)
		.pipe(prune({
			dest: dest,
			ext: ['.min.css.map', '.min.css']
		}))
		.pipe(newer({
			dest: dest,
			ext: '.min.css'
		}))
		.pipe(sourcemaps.init())
		.pipe(sass({ errLogToConsole: true, outputStyle: 'expanded', precision: 5 }))
		.pipe(
			postcss([
				require('autoprefixer')({browsers: '> 5%'}),
				require('cssnano')()
			])
		)
		.pipe(rename({suffix: '.min'}))
		.pipe(sourcemaps.write('.'))
		.pipe(gulp.dest(dest))
	;
});

gulp.task('js', function() {
	var src  = ['./public-dev/js/*.js'];
	var dest = 'public/js';
	return gulp.src(src)
		.pipe(prune({
			dest: dest,
			ext: ['.min.js.map', '.min.js']
		}))
		.pipe(newer({ dest: dest, ext: '.min.js' }))
		.pipe(sourcemaps.init())
		.pipe(uglify())
		.pipe(rename({suffix: '.min'}))
		.pipe(sourcemaps.write('.'))
		.pipe(gulp.dest('public/js'))
	;
});

gulp.task('html', function() {
	var src  = ['./templates-dev/*.phtml'];
	var dest = 'templates';
	return gulp.src(src)
		.pipe(prune(dest))
		.pipe(newer({
			dest: dest,
			extra: ['./templates-dev/*.inc']
		}))
		.pipe(include())
		.pipe(htmlmin({
			removeComments: true,
			collapseWhitespace: true,
			caseSensitive: true,
			decodeEntities: true,
			keepClosingSlash: true,
			collapseBooleanAttributes: false,
			removeAttributeQuotes: false,
			removeRedundantAttributes: true,
			removeEmptyAttributes: true,
			removeScriptTypeAttributes: true,
			removeStyleLinkTypeAttributes: true,
			removeOptionalTags: false,
			processScripts: ['text/jsrender'],
			includeAutoGeneratedTags: false,
			minifyJS: false,
			minifyCSS: true
		}))
		.pipe(gulp.dest(dest))
	;
});

gulp.task('copy', ['clean:files'], function(done) {
	gulp.src([
		'./public-dev/*',
		'!./public-dev/css',
		'!./public-dev/img',
		'!./public-dev/js',
		'!./public-dev/uploads',
	])
		.pipe(exec('mkdir -p public/uploads'))
		.pipe(exec('ln -rfs "<%= file.path %>" ../public/', { cwd: 'public-dev' }))
	;

	done();
});

gulp.task('default', ['images', 'css', 'js', 'html', 'copy']);
